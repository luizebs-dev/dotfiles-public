


v  ["          *@:<C-U>exe "normal! gv"|call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")<CR>
n  ["          *@:call search('\%(^\s*".*\n\)\%(^\s*"\)\@!', "bW")<CR>
v  []          *@m':<C-U>exe "normal! gv"|call search('^\s*end\(f\%[unction]\|def\)\>', "bW")<CR>
n  []          *@m':call search('^\s*end\(f\%[unction]\|def\)\>', "bW")<CR>
v  [[          *@m':<C-U>exe "normal! gv"|call search('^\s*\(fu\%[nction]\|def\)\>', "bW")<CR>
n  [[          *@m':call search('^\s*\(fu\%[nction]\|def\)\>', "bW")<CR>
v  ]"          *@:<C-U>exe "normal! gv"|call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")<CR>
n  ]"          *@:call search('^\(\s*".*\n\)\@<!\(\s*"\)', "W")<CR>
v  ][          *@m':<C-U>exe "normal! gv"|call search('^\s*end\(f\%[unction]\|def\)\>', "W")<CR>
n  ][          *@m':call search('^\s*end\(f\%[unction]\|def\)\>', "W")<CR>
v  ]]          *@m':<C-U>exe "normal! gv"|call search('^\s*\(fu\%[nction]\|def\)\>', "W")<CR>
n  ]]          *@m':call search('^\s*\(fu\%[nction]\|def\)\>', "W")<CR>
   <M-n>       *@:call AutoPairsJump()<CR>
   <M-p>       *@:call AutoPairsToggle()<CR>
n  <Tab>         :tabnext<CR>
n  <NL>        * <Cmd>Lspsaga diagnostic_jump_next<CR>
n  <C-W><NL>     <C-W>-
n  <C-W><C-K>    <C-W>+
n  <C-W><C-L>    <C-W>>
n  <C-W><C-H>    <C-W><
x  <Space>cu     <Plug>NERDCommenterUncomment
n  <Space>cu     <Plug>NERDCommenterUncomment
x  <Space>cb     <Plug>NERDCommenterAlignBoth
n  <Space>cb     <Plug>NERDCommenterAlignBoth
x  <Space>cl     <Plug>NERDCommenterAlignLeft
n  <Space>cl     <Plug>NERDCommenterAlignLeft
n  <Space>cA     <Plug>NERDCommenterAppend
x  <Space>cy     <Plug>NERDCommenterYank
n  <Space>cy     <Plug>NERDCommenterYank
x  <Space>cs     <Plug>NERDCommenterSexy
n  <Space>cs     <Plug>NERDCommenterSexy
x  <Space>ci     <Plug>NERDCommenterInvert
n  <Space>ci     <Plug>NERDCommenterInvert
n  <Space>c$     <Plug>NERDCommenterToEOL
x  <Space>cn     <Plug>NERDCommenterNested
n  <Space>cn     <Plug>NERDCommenterNested
x  <Space>cm     <Plug>NERDCommenterMinimal
n  <Space>cm     <Plug>NERDCommenterMinimal
x  <Space>c<Space>   <Plug>NERDCommenterToggle
n  <Space>c<Space>   <Plug>NERDCommenterToggle
x  <Space>cc     <Plug>NERDCommenterComment
n  <Space>cc     <Plug>NERDCommenterComment
n  <Space>X    * #``cgN
n  <Space>x    * *``cgn
x  <Space>R    * :<C-U>%s/<C-R>=GetVisualSelection()<CR>/
x  <Space>r    * :<C-U>'{,'}s/<C-R>=GetVisualSelection()<CR>/
n  <Space>R    * :%s/\<<C-R>=expand('<cword>')<CR>\>/
n  <Space>r    * :'{,'}s/\<<C-R>=expand('<cword>')<CR>\>/
n  <Space>nf   * :NERDTreeFind<CR>
n  <Space>nt   * :NERDTreeToggle<CR>
n  <Space>nn   * :NERDTree<CR>
n  <Space>n    * :NERDTreeFocus<CR>
n  <Space>ww   * ofunction wait(ms: number): Promise<void> {<CR>return new Promise(res => setTimeout(res, ms));<CR>}<Esc>k=i{<CR>
n  <Space>tt     :Todo<CR>
n  <Space>th     <Plug>BujoAddnormal
n  <Space>tu     <Plug>BujoChecknormal
v  <Space>d    * "_d
n  <Space>d    * "_d
n  <Space>Y    * gg"+yG
v  <Space>y    * "+y
n  <Space>y    * "+y
v  <Space>p    * "_dP
n  <Space>s    * :%s/\<<C-R><C-W>\>/<C-R><C-W>/gI<Left><Left><Left>
n  <Space>cpu  * a%" PRIu64 "<Esc>
n  <Space>ee   * oif err != nil {<CR>log.Fatalf("%+v\n", err)<CR>}<CR><Esc>kkI<Esc>
n  <Space>rp   * :resize 100<CR>
n  <Space>-    * :vertical resize -5<CR>
n  <Space>+    * :vertical resize +5<CR>
n  <Space><CR> * :so ~/.config/nvim/init.vim<CR>
n  <Space>pv   * :Ex<CR>
n  <Space>u    * :UndotreeShow<CR>
n  <Space>bs   * /<C-R>=escape(expand("<cWORD>"), "/")<CR><CR>
n  <Space>ghw  * :h <C-R>=expand("<cword>")<CR><CR>
n  <Space>dcbp   <Plug>VimspectorToggleConditionalBreakpoint
n  <Space>dbp    <Plug>VimspectorToggleBreakpoint
n  <Space>drc    <Plug>VimspectorRunToCursor
n  <Space>d<Space> * :call vimspector#Continue()<CR>
n  <Space>d_     <Plug>VimspectorRestart
n  <Space>dk     <Plug>VimspectorStepOut
n  <Space>dj     <Plug>VimspectorStepOver
n  <Space>dl     <Plug>VimspectorStepInto
n  <Space>dtcb * :call vimspector#CleanLineBreakpoint()<CR>
n  <Space>de   * :call vimspector#Reset()<CR>
n  <Space>do   * :call GotoWindow(g:vimspector_session_windows.output)<CR>
n  <Space>ds   * :call GotoWindow(g:vimspector_session_windows.stack_trace)<CR>
n  <Space>dw   * :call GotoWindow(g:vimspector_session_windows.watches)<CR>
n  <Space>dv   * :call GotoWindow(g:vimspector_session_windows.variables)<CR>
n  <Space>dt   * :call GotoWindow(g:vimspector_session_windows.tagpage)<CR>
n  <Space>dc   * :call GotoWindow(g:vimspector_session_windows.code)<CR>
n  <Space>dd   * :call vimspector#Launch()<CR>
n  <Space>m    * :MaximizerToggle!<CR>
v  <Space>ca   * :<C-U>lua require('lspsaga.codeaction').range_code_action()<CR>
n  <Space>ca   * <Cmd>lua require('lspsaga.codeaction').code_action()<CR>
n  <Space>gs   * :Gstatus<CR>
n  <Space><Space> * :call ToggleQuickfix()<CR>
n  <Space>       <C-W>w
v  #           * :<C-U>let old_reg=getreg('"')|let old_regtype=getregtype('"')<CR>gvy?<C-R><C-R>=substitute(escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>gV:call setreg('"', old_reg, old_regtype)<CR>
o  %             <Plug>(MatchitOperationForward)
x  %             <Plug>(MatchitVisualForward)
n  %             <Plug>(MatchitNormalForward)
v  *           * :<C-U>let old_reg=getreg('"')|let old_regtype=getregtype('"')<CR>gvy/<C-R><C-R>=substitute(escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>gV:call setreg('"', old_reg, old_regtype)<CR>
n  ;l            o//luiz<Space>
n  ;h          * <Cmd>Telescope help_tags<CR>
n  ;b          * <Cmd>Telescope buffers<CR>
n  ;g          * <Cmd>Telescope live_grep<CR>
n  ;f          * <Cmd>Telescope find_files<CR>
n  ;rn         * <Cmd>Lspsaga rename<CR>
v  J           * :m '>+1<CR>gv=gv
n  K           * <Cmd>Lspsaga hover_doc<CR>
v  K           * :m '<-2<CR>gv=gv
n  Q           * <Nop>
o  [%            <Plug>(MatchitOperationMultiBackward)
x  [%            <Plug>(MatchitVisualMultiBackward)
n  [%            <Plug>(MatchitNormalMultiBackward)
n  \-          * <C-X>
n  \+          * <C-A>
n  \x          * "_x
o  ]%            <Plug>(MatchitOperationMultiForward)
x  ]%            <Plug>(MatchitVisualMultiForward)
n  ]%            <Plug>(MatchitNormalMultiForward)
x  a%            <Plug>(MatchitVisualTextObject)
n  dw          * vb"_d
v  gx            <Plug>NetrwBrowseXVis
n  gx            <Plug>NetrwBrowseX
o  g%            <Plug>(MatchitOperationBackward)
x  g%            <Plug>(MatchitVisualBackward)
n  g%            <Plug>(MatchitNormalBackward)
n  gh          * :Lspsaga lsp_finder<CR>
   sl            <C-W>l
   sj            <C-W>j
   sk            <C-W>k
   sh            <C-W>h
   s<Right>      <C-W>l
   s<Down>       <C-W>j
   s<Up>         <C-W>k
   s<Left>       <C-W>h
n  sv            :vsplit<CR><C-W>w
n  ss            :split<CR><C-W>w
n  te            :tabedit<Space>
n  y<C-G>      & :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
n  <SNR>138_:  * :<C-U><C-R>=v:count ? v:count : ''<CR>
   <Plug>AirlineSelectNextTab * :<C-U>call <SNR>125_jump_to_tab(v:count1)<CR>
   <Plug>AirlineSelectPrevTab * :<C-U>call <SNR>125_jump_to_tab(-v:count1)<CR>
   <Plug>AirlineSelectTab0 * :call <SNR>125_select_tab(9)<CR>
   <Plug>AirlineSelectTab9 * :call <SNR>125_select_tab(8)<CR>
   <Plug>AirlineSelectTab8 * :call <SNR>125_select_tab(7)<CR>
   <Plug>AirlineSelectTab7 * :call <SNR>125_select_tab(6)<CR>
   <Plug>AirlineSelectTab6 * :call <SNR>125_select_tab(5)<CR>
   <Plug>AirlineSelectTab5 * :call <SNR>125_select_tab(4)<CR>
   <Plug>AirlineSelectTab4 * :call <SNR>125_select_tab(3)<CR>
   <Plug>AirlineSelectTab3 * :call <SNR>125_select_tab(2)<CR>
   <Plug>AirlineSelectTab2 * :call <SNR>125_select_tab(1)<CR>
   <Plug>AirlineSelectTab1 * :call <SNR>125_select_tab(0)<CR>
v  <Plug>NetrwBrowseXVis * :<C-U>call netrw#BrowseXVis()<CR>
n  <Plug>NetrwBrowseX * :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<CR>
x  <Plug>(MatchitVisualTextObject)   <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
o  <Plug>(MatchitOperationMultiForward) * :<C-U>call matchit#MultiMatch("W",  "o")<CR>
o  <Plug>(MatchitOperationMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "o")<CR>
x  <Plug>(MatchitVisualMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
x  <Plug>(MatchitVisualMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
n  <Plug>(MatchitNormalMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>
n  <Plug>(MatchitNormalMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>
o  <Plug>(MatchitOperationBackward) * :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
o  <Plug>(MatchitOperationForward) * :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
x  <Plug>(MatchitVisualBackward) * :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
x  <Plug>(MatchitVisualForward) * :<C-U>call matchit#Match_wrapper('',1,'v')<CR>m'gv``
n  <Plug>(MatchitNormalBackward) * :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
n  <Plug>(MatchitNormalForward) * :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
n  <Plug>NERDCommenterAltDelims * :call <SNR>38_SwitchToAlternativeDelimiters(1)<CR>
x  <Plug>NERDCommenterUncomment * :call NERDComment("x", "Uncomment")<CR>
n  <Plug>NERDCommenterUncomment * :call NERDComment("n", "Uncomment")<CR>
x  <Plug>NERDCommenterAlignBoth * :call NERDComment("x", "AlignBoth")<CR>
n  <Plug>NERDCommenterAlignBoth * :call NERDComment("n", "AlignBoth")<CR>
x  <Plug>NERDCommenterAlignLeft * :call NERDComment("x", "AlignLeft")<CR>
n  <Plug>NERDCommenterAlignLeft * :call NERDComment("n", "AlignLeft")<CR>
n  <Plug>NERDCommenterAppend * :call NERDComment("n", "Append")<CR>
x  <Plug>NERDCommenterYank * :call NERDComment("x", "Yank")<CR>
n  <Plug>NERDCommenterYank * :call NERDComment("n", "Yank")<CR>
x  <Plug>NERDCommenterSexy * :call NERDComment("x", "Sexy")<CR>
n  <Plug>NERDCommenterSexy * :call NERDComment("n", "Sexy")<CR>
x  <Plug>NERDCommenterInvert * :call NERDComment("x", "Invert")<CR>
n  <Plug>NERDCommenterInvert * :call NERDComment("n", "Invert")<CR>
n  <Plug>NERDCommenterToEOL * :call NERDComment("n", "ToEOL")<CR>
x  <Plug>NERDCommenterNested * :call NERDComment("x", "Nested")<CR>
n  <Plug>NERDCommenterNested * :call NERDComment("n", "Nested")<CR>
x  <Plug>NERDCommenterMinimal * :call NERDComment("x", "Minimal")<CR>
n  <Plug>NERDCommenterMinimal * :call NERDComment("n", "Minimal")<CR>
x  <Plug>NERDCommenterToggle * :call NERDComment("x", "Toggle")<CR>
n  <Plug>NERDCommenterToggle * :call NERDComment("n", "Toggle")<CR>
x  <Plug>NERDCommenterComment * :call NERDComment("x", "Comment")<CR>
n  <Plug>NERDCommenterComment * :call NERDComment("n", "Comment")<CR>
v  <F3>        * :MaximizerToggle<CR>gv
n  <Plug>VimspectorDownFrame * :<C-U>call vimspector#DownFrame()<CR>
n  <Plug>VimspectorUpFrame * :<C-U>call vimspector#UpFrame()<CR>
x  <Plug>VimspectorBalloonEval * :<C-U>call vimspector#ShowEvalBalloon( 1 )<CR>
n  <Plug>VimspectorBalloonEval * :<C-U>call vimspector#ShowEvalBalloon( 0 )<CR>
n  <Plug>VimspectorRunToCursor * :<C-U>call vimspector#RunToCursor()<CR>
n  <Plug>VimspectorStepOut * :<C-U>call vimspector#StepOut()<CR>
n  <Plug>VimspectorStepInto * :<C-U>call vimspector#StepInto()<CR>
n  <Plug>VimspectorStepOver * :<C-U>call vimspector#StepOver()<CR>
n  <Plug>VimspectorAddFunctionBreakpoint * :<C-U>call vimspector#AddFunctionBreakpoint( expand( '<cexpr>' ) )<CR>
n  <Plug>VimspectorToggleConditionalBreakpoint * :<C-U>call vimspector#ToggleBreakpoint( { 'condition': input( 'Enter condition expression: ' ),   'hitCondition': input( 'Enter hit count expression: ' ) } )<CR>
n  <Plug>VimspectorToggleBreakpoint * :<C-U>call vimspector#ToggleBreakpoint()<CR>
n  <Plug>VimspectorPause * :<C-U>call vimspector#Pause()<CR>
n  <Plug>VimspectorRestart * :<C-U>call vimspector#Restart()<CR>
n  <Plug>VimspectorStop * :<C-U>call vimspector#Stop()<CR>
n  <Plug>VimspectorLaunch * :<C-U>call vimspector#Launch( v:true )<CR>
n  <Plug>VimspectorContinue * :<C-U>call vimspector#Continue()<CR>
n  <Plug>PlenaryTestFile * :lua require('plenary.test_harness').test_directory(vim.fn.expand("%:p"))<CR>
   <F11>         :vs %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
   <F10>         :vs %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<CR>
   <F5>          :e %:p:s,.h$,.X123X,:s,.cpp$,.h,:s,.X123X$,.cpp,<CR>
   <F4>          :e %:p:s,.hpp$,.X123X,:s,.cpp$,.hpp,:s,.X123X$,.cpp,<CR>
n  <F3>          :TagbarToggle<CR>
n  <Right>     * :tabnext<CR>
n  <Left>      * :tabprevious<CR>
n  <S-Tab>       :tabprev<CR>
n  <F1>          ggVG
n  <C-S-P>     * "0p
