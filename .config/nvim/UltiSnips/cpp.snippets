priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p
def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')
	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet main0
int main()
{
	${0}
}
endsnippet

snippet forc "general for loop (for)"
for (${6:auto} ${1:i} = ${2:v.begin()}; `!p import re; snip.rv = re.split("[^\w]",t[1])[-1]` ${4:!=} ${3:`!p m = re.search(r'^(?:(.*)(\.|->)begin\(\)|((?:std|boost)::)?begin\((.*)\))$', t[2]); snip.rv = (((m.group(3) if m.group(3) else "") + "end(" + m.group(4) + ")") if m.group(4) else (m.group(1) + m.group(2) + "end()")) if m else ""`}; ${5:++`!p snip.rv = t[1].split(" ")[-1]`}) {
	${VISUAL}$0
}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet nsd "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet


snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet

snippet boost_test "Boost test module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_CASE(${2:TestCaseName})
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite "Boost test suite module" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

BOOST_AUTO_TEST_SUITE(${2:SuiteName})

BOOST_AUTO_TEST_CASE(${3:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet
snippet boost_test_fixture "Boost test module with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_CASE(${3:SuiteName}, $2)
{
	${0:TestDefinition}
}

endsnippet

snippet boost_suite_fixture "Boost test suite with fixture" b
#define BOOST_TEST_MODULE ${1:TestModuleName}
#include <boost/test/included/unit_test.hpp>

struct ${2:FixtureName} {
	$2() {}
	virtual ~$2() {}
	/* define members here */
};

BOOST_FIXTURE_TEST_SUITE(${3:SuiteName}, $2)

BOOST_AUTO_TEST_CASE(${4:TestCaseName})
{
	${0:TestDefinition}
}

BOOST_AUTO_TEST_SUITE_END()

endsnippet





# From https://github.com/kracejic/snippetinabox.vim/blob/master/UltiSnips/c.snippets
#
snippet inc "include"
#include "${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`.h}"
endsnippet

snippet Inc "include <>"
#include <${1:string}>
endsnippet

snippet incjson "include json"
#include <json.hpp>
using json = nlohmann::json;
endsnippet

snippet inca "include <algorithm>"
#include <algorithm>
endsnippet
snippet Inca "include <algorithm>"
#include <algorithm>
endsnippet

snippet cr "const reference"
const ${1:std::string}& $2
endsnippet

snippet cc "Filename::"
${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}::
endsnippet

snippet sing "singleton"
#pragma once

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
public:
	static $1& instance(){
		static $1 instance;
		return instance;
	};
private:
	$1() {$2};
	$1($1 const&) = delete;
	void operator=($1 const&) = delete;
};
endsnippet

snippet singl "singleton lazy"
#pragma once
#include <memory>

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
public:
	static $1& instance(){
		static std::unique_ptr<$1> instance;
		if (not instance)
			instance.reset(new $1());
		return *instance;
	};
private:
	$1() {$2};
	$1($1 const&) = delete;
	void operator=($1 const&) = delete;
};
endsnippet

snippet loadjson "load file to json"
ifstream cfg_file(${1:filaneme});

if (not cfg_file)
	return;
json cfg;
cfg_file >> cfg;
endsnippet

snippet be "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet defmove "default move and copy constructor"
${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}(const $1& p) = default;
$1& operator=(const $1& p) = default;
$1($1&& p) = default;
$1& operator=($1&& p) = default;
endsnippet

snippet forb "for begin, end"
for (auto ${1:it} = ${2:v}.begin(); $1 != $2.end(); ++$1)
{
	$3
}
endsnippet

snippet forr "for range"
for (auto &${1:i} : ${2:v})
{
	$3
}
endsnippet

snippet coute "cout<<'x='<<x<<'\\n'"
std::cout<<"${1:i} = "<<$1<<"\n";
endsnippet

snippet std "std::"
std::$1
endsnippet

snippet temp "template <class T>"
template <class ${1:T}>
endsnippet

snippet enum "enum class"
enum class ${1:name}
{
	$2
};
endsnippet

snippet po "pragma once"
#pragma once
endsnippet

snippet union "union"
union ${1:name}
{
	$2
};
endsnippet

snippet struct "struct"
struct ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
	$2
};
endsnippet

snippet clss "class"
class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
public:
	$3
private:
	$2
};
endsnippet

snippet strl "string literal"
R"($1)"
endsnippet

snippet str "string"
std::string ${1:text}
endsnippet

snippet cstr "const std::string&"
const std::string& ${1:text}
endsnippet

snippet mut "std::mutex"
std::mutex ${1:lock}
endsnippet

snippet lock "std::unique_lock"
std::unique_lock<std::mutex> lock(${1:lock});
endsnippet

snippet alg "std::algorithm(begin, end);"
${1:std::sort}(${2:v}.begin(), $2.end()${3:, [](auto& it$4){$5}})
endsnippet

snippet fun "function"
${1:void} ${2:foo}($3)
{
	$4
}
endsnippet

snippet tfun "templated function"
template <class ${1:T}>
${2:auto} ${3:function_name} ($4)
{
	$5
}
endsnippet

snippet cfun "void Filename::Foo(){}"
${1:void} ${2:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}::${3:foo}($4)
{
	$5
}
endsnippet

snippet { "{}"
{
	$1
}
endsnippet

snippet [ "[]"
[$1]$2
endsnippet

snippet ( "()"
($1)$2
endsnippet

snippet t "this->"
this->$1
endsnippet

snippet alias "namespace"
namespace ${1:ch} = ${2:std::chrono};
endsnippet

snippet us "namespace"
namespace ${1:ch} = ${2:std::chrono};
endsnippet

snippet un "using namespace"
using namespace $1;
endsnippet

snippet ns "namespace"
namespace ${1:_detail}
{
	$2
}
endsnippet

snippet up "unique pointer"
std::unique_ptr<$1> ${2:var}
endsnippet

snippet mu "make unique pointer"
std::make_unique<$1>(${2:var})
endsnippet

snippet sp "shared pointer"
std::shared_ptr<$1> ${2:var}
endsnippet

snippet ms "make shared pointer"
std::make_shared<$1>(${2:var})
endsnippet

snippet uc "unsigned char"
unsigned char ${1:var}
endsnippet

snippet i8 "int8_t"
int8_t ${1:var}
endsnippet

snippet i16 "int16_t"
int16_t ${1:var}
endsnippet

snippet i32 "int32_t"
int32_t ${1:var}
endsnippet

snippet i64 "int64_t"
int64_t ${1:var}
endsnippet

snippet u8 "uint8_t"
uint8_t ${1:var}
endsnippet

snippet u16 "uint16_t"
uint16_t ${1:var}
endsnippet

snippet u32 "uint32_t"
uint32_t ${1:var}
endsnippet

snippet u64 "uint64_t"
uint64_t ${1:var}
endsnippet

snippet cset "setter"
void set${1/(.)(.*)/\u$1$2/}(${2:const std::string&} _${1:var}) {$1 = _$1;};
endsnippet
snippet cget "getter"
${2:const std::string&} get${1/(.)(.*)/\u$1$2/}() {return ${1:var};};
endsnippet
snippet setget "setter and getter"
void set${1/(.)(.*)/\u$1$2/}(${2:const std::string&} _${1:var}) {$1 = _$1;};
$2 get${1/(.)(.*)/\u$1$2/}() {return $1;};
endsnippet

snippet //cf "clang-format on/off"
// clang-format off
// clang-format on
endsnippet
snippet //co "clang-format on/off"
// clang-format off
// clang-format on
endsnippet
snippet //clang "clang-format on/off"
// clang-format off
// clang-format on
endsnippet

snippet // "comment block"
/**
 * $1
 */
endsnippet

snippet /* "comment block"
/**
 * $1
 */
endsnippet

snippet load "load file to string"
std::ifstream file(${1:"file.txt"});
file.seekg(0, std::ios::end);
std::string ${2:buffer};
$2.reserve(file.tellg());
file.seekg(0, std::ios::beg);
$2.assign((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
${3:#include <string>
#include <fstream>
#include <streambuf> }
endsnippet

snippet main "extended main"
#include <vector>
#include <string>
#include <iostream>
#include <stdio.h>
#include <fstream>

//g++ `!v expand('%:t')` -std=c++14 -o a.exe && ./a.exe

using namespace std;

int main(int argc, char const *argv[])
{
	${2:cout<<"hello world!"<<endl;
	ifstream file("filename.txt");
	string s2;
	while (getline(file, s2)) //any newline will stop the reading
		cout << s2 << endl;
}

	return 0;
}
endsnippet


snippet async "std::async"
async(${1:std::launch::async, }[${2:this}](${3}){
	${4:return true;}
});
endsnippet

# spdlog snippets
snippet ll "L->debug(a, a)"
L->${3:debug}("${1:var} = {}", $1);
endsnippet

snippet l "L->debug()"
L->debug("${1:log}"${2});
endsnippet

snippet debug "L->debug()"
L->debug("${1:log}"${2});
endsnippet

snippet info "L->info()"
L->info("${1:log}"${2});
endsnippet

snippet warn "L->warn()"
L->warn("${1:log}"${2});
endsnippet

snippet error "L->error()"
L->error("${1:log}"${2});
endsnippet

snippet sc "static_cast"
static_cast<$1>($2)
endsnippet

snippet rc "reinterpret_cast"
reinterpret_cast<$1>($2)
endsnippet

snippet dc "dynamic_cast"
dynamic_cast<$1>($2)
endsnippet

snippet cca "const_cast"
const_cast<$1>($2)
endsnippet


#------------------------------------------------------------------------------
# Catch

snippet catch "catch unittest with quards"
//-----------------------------------------------------------------------------
#ifdef UNIT_TESTS
#include "catch.hpp"

TEST_CASE("$1")
{
	$2
	REQUIRE($3);
}

#endif
endsnippet

snippet test "catch unittest"
TEST_CASE("$1")
{
	$2
	REQUIRE($3);
}
endsnippet

snippet req "catch REQUIRE"
REQUIRE($1);
endsnippet


# Previous snippets, probably from the brazilian guy...


#
##
## Preprocessor
# #include <...>
snippet incc
	#include <${1:iostream}>
endsnippet
  
snippet binc
	#include <boost/${1:shared_ptr}.hpp>
endsnippet
##
## STL Collections
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};
endsnippet
# std::vector
snippet vector
	std::vector<${1:T}> ${2};
endsnippet
# std::deque
snippet deque
	std::deque<${1:T}> ${2};
endsnippet
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};
endsnippet
# std::list
snippet list
	std::list<${1:T}> ${2};
endsnippet
# std::set
snippet set
	std::set<${1:T}> ${2};
endsnippet
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};
endsnippet
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};
endsnippet
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};
endsnippet
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet
# std::stack
snippet stack
	std::stack<${1:T}> ${2};
endsnippet
# std::queue
snippet queue
	std::queue<${1:T}> ${2};
endsnippet
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};
endsnippet
##
## STL smart pointers
# std::shared_ptr
snippet msp
	std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
endsnippet
snippet amsp
	auto ${1} = std::make_shared<${2:T}>(${3});
endsnippet
# std::unique_ptr
snippet mup
	std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
endsnippet
snippet amup
	auto ${1} = std::make_unique<${2:T}>(${3});
endsnippet
##
## Access Modifiers
# private
snippet pri
	private
endsnippet
# protected
snippet pro
	protected
endsnippet
# public
snippet pub
	public
endsnippet
# friend
snippet fr
	friend
endsnippet
# mutable
snippet mu
	mutable
endsnippet
##
## Class
# class
snippet cld
	/*! \class $1
	 *  \brief ${3:Brief class description}
	 *
	 *  ${4:Detailed description}
	 */
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		virtual ~$2();

	protected:
		m_${5}; /*!< ${6:Member description} */
	};
endsnippet
# member function implementation
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
endsnippet
# member function implementation without parameters
snippet dmfun0
	/*! \brief ${4:Brief function description here}
	 *
	 *  ${5:Detailed description}
	 *
	 * \return ${6:Return parameter description}
	 */
	${3:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}() {
		${0}
	}
endsnippet
# member function implementation with one parameter
snippet dmfun1
	/*! \brief ${6:Brief function description here}
	 *
	 *  ${7:Detailed description}
	 *
	 * \param $4 ${8:Parameter description}
	 * \return ${9:Return parameter description}
	 */
	${5:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter}) {
		${0}
	}
endsnippet
# member function implementation with two parameter
snippet dmfun2
	/*! \brief ${8:Brief function description here}
	 *
	 *  ${9:Detailed description}
	 *
	 * \param $4 ${10:Parameter description}
	 * \param $6 ${11:Parameter description}
	 * \return ${12:Return parameter description}
	 */
	${7:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter},${5:Type} ${6:Parameter}) {
		${0}
	}
endsnippet
# namespace
snippet ns0
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
endsnippet
snippet ans
	namespace {
		${0}
	}
endsnippet
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;
endsnippet
# std::cin
snippet cin
	std::cin >> ${1};
endsnippet
##
## Casts
# static
snippet sca
	static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# dynamic
snippet dca
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# reinterpret
snippet rca
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
# const
snippet ccast
	const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
## Iteration
# for i
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4}
	}
endsnippet

# foreach
snippet fore
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
endsnippet
# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}
endsnippet

# auto iterator
snippet itera
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
endsnippet
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}};
endsnippet
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	};
endsnippet
# snippets exception
snippet try
	try {

	}catch(${1}) {

	}
endsnippet
snippet af "auto function"
	auto ${1:name}(${2}) -> ${3:void}
	{
		${0}
	};
endsnippet
