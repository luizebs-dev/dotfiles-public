n  <Space>f    lsp.buf.formatting()<CR>
n  <Space>q    lsp.diagnostic.set_loclist()<CR>
n  <Space>e    lsp.diagnostic.show_line_diagnostics()<CR>
n  <Space>ca   lsp.buf.code_action()<CR>
n  <Space>rn   lsp.buf.rename()<CR>
n  <Space>D    lsp.buf.type_definition()<CR>
n  <Space>wl   t(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>
n  <Space>wr   lsp.buf.remove_workspace_folder()<CR>
n  <Space>wa   lsp.buf.add_workspace_folder()<CR>
n  gr          lsp.buf.references()<CR>
n  gi          lsp.buf.implementation()<CR>
n  gd          lsp.buf.definition()<CR>
n  gD          lsp.buf.declaration()<CR>
n  <S-NL>      lsp.diagnostic.goto_next()<CR>
   <M-n>       *@:call AutoPairsJump()<CR>
   <M-p>       *@:call AutoPairsToggle()<CR>
n  <Tab>         :tabnext<CR>
n  <NL>        * <Cmd>Lspsaga diagnostic_jump_next<CR>
n  <C-W><NL>     <C-W>-
n  <C-W><C-K>    <C-W>+
n  <C-W><C-L>    <C-W>>
n  <C-W><C-H>    <C-W><
n  <Space>dcbp   VimspectorToggleConditionalBreakpoint
n  <Space>dbp    VimspectorToggleBreakpoint
n  <Space>drc    VimspectorRunToCursor
n  <Space>d<Space> * vimspector#Continue()<CR>
n  <Space>d_     VimspectorRestart
n  <Space>dk     VimspectorStepOut
n  <Space>dj     VimspectorStepOver
n  <Space>dl     VimspectorStepInto
n  <Space>dtcb * vimspector#CleanLineBreakpoint()<CR>
n  <Space>de   * vimspector#Reset()<CR>
n  <Space>do   * GotoWindow(g:vimspector_session_windows.output)<CR>
n  <Space>ds   * GotoWindow(g:vimspector_session_windows.stack_trace)<CR>
n  <Space>dw   * GotoWindow(g:vimspector_session_windows.watches)<CR>
n  <Space>dv   * GotoWindow(g:vimspector_session_windows.variables)<CR>
n  <Space>dt   * GotoWindow(g:vimspector_session_windows.tagpage)<CR>
n  <Space>dc   * GotoWindow(g:vimspector_session_windows.code)<CR>
n  <Space>dd   * vimspector#Launch()<CR>
n  <Space>m    * :MaximizerToggle!<CR>
x  <Space>cu     NERDCommenterUncomment
n  <Space>cu     NERDCommenterUncomment
x  <Space>cb     NERDCommenterAlignBoth
n  <Space>cb     NERDCommenterAlignBoth
x  <Space>cl     NERDCommenterAlignLeft
n  <Space>cl     NERDCommenterAlignLeft
n  <Space>cA     NERDCommenterAppend
x  <Space>cy     NERDCommenterYank
n  <Space>cy     NERDCommenterYank
x  <Space>cs     NERDCommenterSexy
n  <Space>cs     NERDCommenterSexy
x  <Space>ci     NERDCommenterInvert
n  <Space>ci     NERDCommenterInvert
n  <Space>c$     NERDCommenterToEOL
x  <Space>cn     NERDCommenterNested
n  <Space>cn     NERDCommenterNested
x  <Space>cm     NERDCommenterMinimal
n  <Space>cm     NERDCommenterMinimal
x  <Space>c<Space>   NERDCommenterToggle
n  <Space>c<Space>   NERDCommenterToggle
x  <Space>cc     NERDCommenterComment
n  <Space>cc     NERDCommenterComment
n  <Space>x    * "_x
n  <Space>nf   * :NERDTreeFind<CR>
n  <Space>nt   * :NERDTreeToggle<CR>
n  <Space>nn   * :NERDTree<CR>
n  <Space>n    * :NERDTreeFocus<CR>
n  <Space>ww   * ofunction wait(ms: number): 
        Promise<void> {<CR>return new Promise
        (res => setTimeout(res, ms));<CR>}
        <Esc>k=i{<CR>

n  <Space>th     BujoAddnormal
n  <Space>tu     BujoChecknormal
v  <Space>d    * "_d
n  <Space>d    * "_d
n  <Space>Y    * gg"+yG
v  <Space>y    * "+y
n  <Space>y    * "+y
v  <Space>p    * "_dP
n  <Space>s    * :%s/\<<C-R><C-W>\>/<C-R><C-W>/gI<Left><Left><Left>
n  <Space>cpu  * a%" PRIu64 "<Esc>
n  <Space>ee   * oif err != nil {<CR>log.Fatalf("%+v\n", err)<CR>}<CR><Esc>kkI<Esc>
n  <Space>rp   * :resize 100<CR>
n  <Space>-    * :vertical resize -5<CR>
n  <Space>+    * :vertical resize +5<CR>
n  <Space><CR> * :so ~/.config/nvim/init.vim<CR>
n  <Space>pv   * :Ex<CR>
n  <Space>u    * :UndotreeShow<CR>
n  <Space>bs   * /<C-R>=escape(expand("<cWORD>"), "/")<CR><CR>
n  <Space>ghw  * :h <C-R>=expand("<cword>")<CR><CR>
v  <Space>ca   * :<C-U>lua require('lspsaga.codeaction').range_code_action()<CR>
n  <Space>ca   * <Cmd>lua require('lspsaga.codeaction').code_action()<CR>
n  <Space>gs   * :Gstatus<CR>
n  <Space><Space> * :call ToggleQuickfix()<CR>
n  <Space>       <C-W>w
v  #           * :<C-U>let old_reg=getreg('"')|
     let old_regtype=getregtype('"')<CR>gvy?<C-R><C-R>=
     substitute(escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>gV:
     call setreg('"', old_reg, old_regtype)<CR>

o  %             (MatchitOperationForward)
x  %             (MatchitVisualForward)
n  %             (MatchitNormalForward)
v  *           * :<C-U>let old_reg=getreg('"')|let old
    _regtype=getregtype('"')<CR>gvy/<C-R><C-R>=
    substitute(escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>gV:
    call setreg('"', old_reg, old_regtype)<CR>

n  ;h          Telescope help_tags<CR>
n  ;b          Telescope buffers<CR>
n  ;g          Telescope live_grep<CR>
n  ;f          Telescope find_files<CR>
v  J           * :m '>+1<CR>gv=gv
n  K           * <Cmd>Lspsaga hover_doc<CR>
v  K           * :m '<-2<CR>gv=gv
n  Q           * <Nop>
o  [%          (MatchitOperationMultiBackward)
x  [%          (MatchitVisualMultiBackward)
n  [%          (MatchitNormalMultiBackward)
n  \-          * <C-X>
n  \+          * <C-A>
n  \x          * "_x
o  ]%          (MatchitOperationMultiForward)
x  ]%          (MatchitVisualMultiForward)
n  ]%          (MatchitNormalMultiForward)
x  a%          (MatchitVisualTextObject)
n  dw          vb"_d
n  gr          <Cmd>Lspsaga rename<CR>
v  gx          NetrwBrowseXVis
n  gx          NetrwBrowseX
o  g%          (MatchitOperationBackward)
x  g%          (MatchitVisualBackward)
n  g%          (MatchitNormalBackward)
n  gh          Lspsaga lsp_finder<CR>
   sl            <C-W>l
   sj            <C-W>j
   sk            <C-W>k
   sh            <C-W>h
   s<Right>      <C-W>l
   s<Down>       <C-W>j
   s<Up>         <C-W>k
   s<Left>       <C-W>h
n  sv            :vsplit<CR><C-W>w
n  ss            :split<CR><C-W>w
n  te            :tabedit<Space>
n  y<C-G>      & :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
v  <F3>        * :MaximizerToggle<CR>gv
n  <F3>        * :MaximizerToggle<CR>
n  <Right>     * :tabnext<CR>
n  <Left>      * :tabprevious<CR>
n  <S-Tab>       :tabprev<CR>
n  <F1>          ggVG
n  <C-S-P>     * "0p




n  <Plug>NERDCommenterAltDelims * :call <SNR>84_SwitchToAlternativeDelimiters(1)<CR>
x  <Plug>NERDCommenterUncomment * :call NERDComment("x", "Uncomment")<CR>
n  <Plug>NERDCommenterUncomment * :call NERDComment("n", "Uncomment")<CR>
x  <Plug>NERDCommenterAlignBoth * :call NERDComment("x", "AlignBoth")<CR>
n  <Plug>NERDCommenterAlignBoth * :call NERDComment("n", "AlignBoth")<CR>
x  <Plug>NERDCommenterAlignLeft * :call NERDComment("x", "AlignLeft")<CR>
n  <Plug>NERDCommenterAlignLeft * :call NERDComment("n", "AlignLeft")<CR>
n  <Plug>NERDCommenterAppend * :call NERDComment("n", "Append")<CR>
x  <Plug>NERDCommenterYank * :call NERDComment("x", "Yank")<CR>
n  <Plug>NERDCommenterYank * :call NERDComment("n", "Yank")<CR>
x  <Plug>NERDCommenterSexy * :call NERDComment("x", "Sexy")<CR>
n  <Plug>NERDCommenterSexy * :call NERDComment("n", "Sexy")<CR>
x  <Plug>NERDCommenterInvert * :call NERDComment("x", "Invert")<CR>
n  <Plug>NERDCommenterInvert * :call NERDComment("n", "Invert")<CR>
n  <Plug>NERDCommenterToEOL * :call NERDComment("n", "ToEOL")<CR>
x  <Plug>NERDCommenterNested * :call NERDComment("x", "Nested")<CR>
n  <Plug>NERDCommenterNested * :call NERDComment("n", "Nested")<CR>
x  <Plug>NERDCommenterMinimal * :call NERDComment("x", "Minimal")<CR>
n  <Plug>NERDCommenterMinimal * :call NERDComment("n", "Minimal")<CR>
x  <Plug>NERDCommenterToggle * :call NERDComment("x", "Toggle")<CR>
n  <Plug>NERDCommenterToggle * :call NERDComment("n", "Toggle")<CR>
x  <Plug>NERDCommenterComment * :call NERDComment("x", "Comment")<CR>
n  <Plug>NERDCommenterComment * :call NERDComment("n", "Comment")<CR>

n  <Plug>VimspectorDownFrame * :<C-U>call vimspector#DownFrame()<CR>
n  <Plug>VimspectorUpFrame * :<C-U>call vimspector#UpFrame()<CR>
x  <Plug>VimspectorBalloonEval * :<C-U>call vimspector#ShowEvalBalloon( 1 )<CR>
n  <Plug>VimspectorBalloonEval * :<C-U>call vimspector#ShowEvalBalloon( 0 )<CR>
n  <Plug>VimspectorRunToCursor * :<C-U>call vimspector#RunToCursor()<CR>
n  <Plug>VimspectorStepOut * :<C-U>call vimspector#StepOut()<CR>
n  <Plug>VimspectorStepInto * :<C-U>call vimspector#StepInto()<CR>
n  <Plug>VimspectorStepOver * :<C-U>call vimspector#StepOver()<CR>
n  <Plug>VimspectorAddFunctionBreakpoint * :<C-U>call vimspector#AddFunctionBreakpoint( expand( '<cexpr>' ) )<CR>
n  <Plug>VimspectorToggleConditionalBreakpoint * :<C-U>call vimspector#ToggleBreakpoint( { 'condition': input( 'Enter condition expression: ' ),   'hitCondition': input( 'Enter hit count expression: ' ) } )<CR>
n  <Plug>VimspectorToggleBreakpoint * :<C-U>call vimspector#ToggleBreakpoint()<CR>
n  <Plug>VimspectorPause * :<C-U>call vimspector#Pause()<CR>
n  <Plug>VimspectorRestart * :<C-U>call vimspector#Restart()<CR>
n  <Plug>VimspectorStop * :<C-U>call vimspector#Stop()<CR>
n  <Plug>VimspectorLaunch * :<C-U>call vimspector#Launch( v:true )<CR>
n  <Plug>VimspectorContinue * :<C-U>call vimspector#Continue()<CR>
v  <Plug>NetrwBrowseXVis * :<C-U>call netrw#BrowseXVis()<CR>
n  <Plug>NetrwBrowseX * :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<CR>
x  <Plug>(MatchitVisualTextObject)   <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
o  <Plug>(MatchitOperationMultiForward) * :<C-U>call matchit#MultiMatch("W",  "o")<CR>
o  <Plug>(MatchitOperationMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "o")<CR>
x  <Plug>(MatchitVisualMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
x  <Plug>(MatchitVisualMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
n  <Plug>(MatchitNormalMultiForward) * :<C-U>call matchit#MultiMatch("W",  "n")<CR>
n  <Plug>(MatchitNormalMultiBackward) * :<C-U>call matchit#MultiMatch("bW", "n")<CR>
o  <Plug>(MatchitOperationBackward) * :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
o  <Plug>(MatchitOperationForward) * :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
x  <Plug>(MatchitVisualBackward) * :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
x  <Plug>(MatchitVisualForward) * :<C-U>call matchit#Match_wrapper('',1,'v')<CR>m'gv``
n  <Plug>(MatchitNormalBackward) * :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
n  <Plug>(MatchitNormalForward) * :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
n  <Plug>PlenaryTestFile * :lua require('plenary.test_harness').test_directory(vim.fn.expand("%:p"))<CR>

